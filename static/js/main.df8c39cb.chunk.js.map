{"version":3,"sources":["features/display/displaySlice.js","features/setter/Setter.js","features/display/Display.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["interval","Setter","name","increment","decrement","session","select","useSelector","state","display","minsSession","minsBreak","dispatch","useDispatch","className","id","replace","c","toUpperCase","class","onClick","displaySlice","createSlice","initialState","title","mins","secs","playing","reducers","incrementSession","update","decrementSession","incrementBreak","decrementBreak","decrementSec","changeTitle","changePlaying","actions","Display","selectTitle","selectPlaying","selectMins","selectSecs","play","setInterval","clearInterval","App","configureStore","reducer","displayReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df8c39cb.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const displaySlice = createSlice ({\n  name: 'display',\n  initialState: {\n    title: 'Session',\n    minsSession: 25,\n    minsBreak: 5,\n    mins: 25,\n    secs: 0,\n    playing: false,\n  },\n  reducers: {\n    incrementSession: (state) => {\n      if (!state.playing) {\n        state.minsSession += 1;\n        if (state.title === 'Session') { update(state, true) }\n      }\n    },\n    decrementSession: (state) => {\n      if (!state.playing && state.minsSession > 1) {\n        state.minsSession -= 1;\n        if (state.title === 'Session') { update(state, true) }\n      }\n    },\n    incrementBreak: (state) => {\n      if (!state.playing) {\n        state.minsBreak += 1;\n        if (state.title === 'Break') { update(state, false) }\n      }\n    },\n    decrementBreak: (state) => {\n      if (!state.playing && state.minsBreak > 1) {\n        state.minsBreak -= 1;\n        if (state.title === 'Break') { update(state, false) }\n      }\n    },\n    decrementSec: state => {\n      if (state.secs !== 0) {\n        state.secs -= 1;\n      } else {\n        if (state.mins !== 0) {\n          state.secs = 59;\n          state.mins = state.mins - 1;\n        } else {\n          state.secs = 59;\n          if (state.title === 'Session') {\n            state.title = 'Break';\n            state.mins = state.minsBreak - 1;\n          } else {\n            state.title = 'Session';\n            state.mins = state.minsSession - 1;\n          }\n        }\n      }\n    },\n    changeTitle: state => {state.title = state.title === 'Session' ? 'Break' : 'Session'},\n    changePlaying: state => {state.playing = !state.playing},\n  }\n});\n\nconst update = (state, session) => {\n  state.mins = session ? state.minsSession : state.minsBreak;\n  state.secs = 0;\n}\n\n\nvar interval;\n\nexport const playAsync = playing => dispatch => {\n  if (playing) {\n    interval = setInterval(() => {\n      dispatch(displaySlice.actions.decrementSec());\n    }, 1000);\n  } else {\n    clearInterval(interval);\n  }\n}\n\nexport const { changePlaying, incrementSession, decrementSession, incrementBreak, decrementBreak } = displaySlice.actions;\n\nexport default displaySlice.reducer;\n","import { useDispatch, useSelector } from \"react-redux\";\n\nconst Setter = ({ name, increment, decrement }) => {\n  const session = name === 'session';\n  const select = useSelector(state => session ? state.display.minsSession : state.display.minsBreak);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"Setter\">\n      <h4 id={`${name}-label`}>{`${name.replace(/^\\w/, (c) => c.toUpperCase())} Length`}</h4>\n      <div class=\"item line-arrows\">\n        <i class=\"pointer fas fa-arrow-up\" id={`${name}-increment`} onClick={() => dispatch(increment())}></i>\n        <h4 class=\"item\" id={`${name}-length`}>{select}</h4>\n        <i class=\"pointer item fas fa-arrow-down\" id={`${name}-decrement`} onClick={() => dispatch(decrement())}></i>\n      </div>\n    </div>\n  )\n}\n\nexport default Setter;\n","import { useDispatch, useSelector } from \"react-redux\"\nimport { playAsync, changePlaying } from \"./displaySlice\";\n\n\nconst Display = () => {\n  const selectTitle = useSelector(state => state.display.title);\n  const selectPlaying = useSelector(state => state.display.playing);\n  const selectMins = useSelector(state => state.display.mins);\n  const selectSecs = useSelector(state => state.display.secs);\n  const dispatch = useDispatch();\n\n  const play = () => {\n    dispatch(playAsync(!selectPlaying));\n    dispatch(changePlaying());\n  }\n\n  return (\n    <div className=\"mainFrame\">\n      <div className=\"Display\">\n        <h3>{selectTitle}</h3>\n        <span>{selectMins}:{(selectSecs < 10 ? '0':'')+selectSecs}</span>\n      </div>\n      <div className=\"container-icons\">\n        <div className=\"icons pointer\" onClick={() => play()}>\n          <i class=\"fas fa-play\"></i>\n          <i class=\"fas fa-pause\"></i>\n        </div>\n        <i class=\"icon pointer fas fa-sync-alt\"></i>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Display;\n","import React from 'react';\r\nimport './assets/App.css';\r\nimport Setter from './features/setter/Setter';\r\nimport Display from './features/display/Display'\r\nimport { incrementBreak, incrementSession, decrementBreak, decrementSession} from './features/display/displaySlice'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>25 + 5 Clock</h1>\r\n      <div className=\"Setters\">\r\n        <Setter name=\"break\" increment={incrementBreak} decrement={decrementBreak}/>\r\n        <Setter name=\"session\" increment={incrementSession} decrement={decrementSession}/>\r\n      </div>\r\n      <Display/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport displayReducer from '../features/display/displaySlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    display: displayReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}